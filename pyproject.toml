[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "clickhouse-tools"
version = "1.0.0"
license = "MIT"
description = "clickhouse-tools is a set of tools for administration and diagnostics of ClickHouse DBMS."

authors = [
    "Alexander Burmak <alex-burmak@yandex-team.ru>",
    "Dmitry Starov <dstaroff@yandex-team.ru>",
    "Anton Ivashkin <iantonspb@yandex-team.ru>",
    "Grigory Pervakov <pervakovg@yandex-team.ru>",
    "Petr Nuzhnov <petrnuzhnov@yandex-team.ru>",
    "Egor Medvedev <egor-medvedev@yandex-team.ru>",
    "Aleksei Filatov <alexfvk@yandex-team.ru>",
    "Evgeny Dyukov <secwall@yandex-team.ru>",
    "Evgeny Strizhnev <estrizhnev@yandex-team.ru>",
    "Vadim Volodin <vadim-volodin@yandex-team.ru>",
    "Anton Chaporgin <chapson@yandex-team.ru>",
    "Evgenii Kopanev <ekopanev@yandex-team.ru>",
    "Mikhail Kot <myrrc@yandex-team.ru>",
]

maintainers = [
    "Alexander Burmak <alex-burmak@yandex-team.ru>",
    "Dmitry Starov <dstaroff@yandex-team.ru>",
    "Anton Ivashkin <iantonspb@yandex-team.ru>",
    "Grigory Pervakov <pervakovg@yandex-team.ru>",
    "Petr Nuzhnov <petrnuzhnov@yandex-team.ru>",
    "Egor Medvedev <egor-medvedev@yandex-team.ru>",
    "Aleksei Filatov <alexfvk@yandex-team.ru>",
    "Evgenii Kopanev <ekopanev@yandex-team.ru>",
    "Mikhail Kot <myrrc@yandex-team.ru>",
]

readme = "README.md"
homepage = "https://github.com/yandex/ch-tools"
repository = "https://github.com/yandex/ch-tools"

keywords=[
    "clickhouse",
    "database",
    "monitoring",
    "diagnostics",
    "administration",
]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: BSD",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Environment :: Console",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Typing :: Typed",
]

packages = [
    { include = "ch_tools" },
]

include = ["resources/"]


[tool.poetry.dependencies]
python = "^3.6.2"

boto3 = "~1.23.10"
click = "~8.0.4"
cloup = "*"
deepdiff = "<6.4.0"  # 6.4.0 version contains a bug https://github.com/seperman/deepdiff/issues/415
dnspython = "*"
file_read_backwards = "*"
humanfriendly = "*"
jinja2 = "*"
kazoo = "*"
lxml = "*"
psutil = "*"
pygments = "*"
pyopenssl = "*"
python-dateutil = "*"
pyyaml = "<5.4"
requests = "<2.30.0"
tabulate = "*"
tenacity = "*"
termcolor = "*"
tqdm = "*"
typing-extensions = "~4.1.1"
xmltodict = "*"

[tool.poetry.dev-dependencies]
# TODO: use groups in a modern version of poetry
# tests
behave = "*"
docker = "*"
docker-compose = "*"
pyhamcrest = "*"
pytest = "*"
pyfakefs = "*"

# lint
black = { version = "^22.0.0", python = ">=3.10" }
ruff = { version = "*", python = ">=3.10" }
isort = { version = "^5.0.0", extras = ["pyproject"], python = ">=3.10" }
mypy = { version = "~1.4", python = ">=3.10" }
pylint = { version = "^2.17.5", python = ">=3.10" }
types-pyOpenSSL = { version = "*", python = ">=3.10" }
types-python-dateutil = { version = "*", python = ">=3.10" }
types-pyyaml = { version = "*", python = ">=3.10" }
types-requests = { version = "*", python = ">=3.10" }
types-setuptools = { version = "*", python = ">=3.10" }
types-tabulate = { version = "*", python = ">=3.10" }
codespell = { version = "*", python = ">=3.10" }
tomli = { version = "*", python = ">=3.10" }

[tool.poetry.scripts]
chadmin = "ch_tools.chadmin.chadmin_cli:main"
ch-monitoring = "ch_tools.monrun_checks.main:main"
keeper-monitoring = "ch_tools.monrun_checks_keeper.main:main"
ch-s3-credentials = "ch_tools.s3_credentials.main:main"

[tool.isort]
profile = "black"

[tool.ruff]
select = ["E", "F", "W", "A"]
ignore = [
    "A003",  # "Class attribute is shadowing a Python builtin"
    "E402",  # "Module level import not at top of file", duplicate corresponding pylint check
    "E501",  # "Line too long"
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # "Unused import"

[tool.mypy]
ignore_missing_imports = true
disallow_incomplete_defs = true
check_untyped_defs = true
exclude = ['tests/staging']

[tool.codespell]
skip = 'poetry.lock'
ignore-words-list = 'sav,fpr'  # `fpr` is used in parsing GPG output
